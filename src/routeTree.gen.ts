/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as GenrateImageIndexImport } from './routes/genrateImage/index'
import { Route as ChatsIndexImport } from './routes/chats/index'
import { Route as CatalogIndexImport } from './routes/catalog/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as UsersUseridImport } from './routes/users/$userid'
import { Route as CatalogClothIdImport } from './routes/catalog/$clothId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const GenrateImageIndexRoute = GenrateImageIndexImport.update({
  id: '/genrateImage/',
  path: '/genrateImage/',
  getParentRoute: () => rootRoute,
} as any)

const ChatsIndexRoute = ChatsIndexImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => rootRoute,
} as any)

const CatalogIndexRoute = CatalogIndexImport.update({
  id: '/catalog/',
  path: '/catalog/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUseridRoute = UsersUseridImport.update({
  id: '/users/$userid',
  path: '/users/$userid',
  getParentRoute: () => rootRoute,
} as any)

const CatalogClothIdRoute = CatalogClothIdImport.update({
  id: '/catalog/$clothId',
  path: '/catalog/$clothId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/catalog/$clothId': {
      id: '/catalog/$clothId'
      path: '/catalog/$clothId'
      fullPath: '/catalog/$clothId'
      preLoaderRoute: typeof CatalogClothIdImport
      parentRoute: typeof rootRoute
    }
    '/users/$userid': {
      id: '/users/$userid'
      path: '/users/$userid'
      fullPath: '/users/$userid'
      preLoaderRoute: typeof UsersUseridImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/catalog/': {
      id: '/catalog/'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogIndexImport
      parentRoute: typeof rootRoute
    }
    '/chats/': {
      id: '/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof ChatsIndexImport
      parentRoute: typeof rootRoute
    }
    '/genrateImage/': {
      id: '/genrateImage/'
      path: '/genrateImage'
      fullPath: '/genrateImage'
      preLoaderRoute: typeof GenrateImageIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/catalog/$clothId': typeof CatalogClothIdRoute
  '/users/$userid': typeof UsersUseridRoute
  '/auth': typeof AuthIndexRoute
  '/catalog': typeof CatalogIndexRoute
  '/chats': typeof ChatsIndexRoute
  '/genrateImage': typeof GenrateImageIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/catalog/$clothId': typeof CatalogClothIdRoute
  '/users/$userid': typeof UsersUseridRoute
  '/auth': typeof AuthIndexRoute
  '/catalog': typeof CatalogIndexRoute
  '/chats': typeof ChatsIndexRoute
  '/genrateImage': typeof GenrateImageIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/catalog/$clothId': typeof CatalogClothIdRoute
  '/users/$userid': typeof UsersUseridRoute
  '/auth/': typeof AuthIndexRoute
  '/catalog/': typeof CatalogIndexRoute
  '/chats/': typeof ChatsIndexRoute
  '/genrateImage/': typeof GenrateImageIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/catalog/$clothId'
    | '/users/$userid'
    | '/auth'
    | '/catalog'
    | '/chats'
    | '/genrateImage'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/catalog/$clothId'
    | '/users/$userid'
    | '/auth'
    | '/catalog'
    | '/chats'
    | '/genrateImage'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/catalog/$clothId'
    | '/users/$userid'
    | '/auth/'
    | '/catalog/'
    | '/chats/'
    | '/genrateImage/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CatalogClothIdRoute: typeof CatalogClothIdRoute
  UsersUseridRoute: typeof UsersUseridRoute
  AuthIndexRoute: typeof AuthIndexRoute
  CatalogIndexRoute: typeof CatalogIndexRoute
  ChatsIndexRoute: typeof ChatsIndexRoute
  GenrateImageIndexRoute: typeof GenrateImageIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CatalogClothIdRoute: CatalogClothIdRoute,
  UsersUseridRoute: UsersUseridRoute,
  AuthIndexRoute: AuthIndexRoute,
  CatalogIndexRoute: CatalogIndexRoute,
  ChatsIndexRoute: ChatsIndexRoute,
  GenrateImageIndexRoute: GenrateImageIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/catalog/$clothId",
        "/users/$userid",
        "/auth/",
        "/catalog/",
        "/chats/",
        "/genrateImage/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/catalog/$clothId": {
      "filePath": "catalog/$clothId.tsx"
    },
    "/users/$userid": {
      "filePath": "users/$userid.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/catalog/": {
      "filePath": "catalog/index.tsx"
    },
    "/chats/": {
      "filePath": "chats/index.tsx"
    },
    "/genrateImage/": {
      "filePath": "genrateImage/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
